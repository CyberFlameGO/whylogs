:py:mod:`whylogs.core.metrics.column_metrics`
=============================================

.. py:module:: whylogs.core.metrics.column_metrics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.core.metrics.column_metrics.TypeCountersMetric
   whylogs.core.metrics.column_metrics.ColumnCountsMetric




.. py:class:: TypeCountersMetric

   Bases: :py:obj:`whylogs.core.metrics.metrics.Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: integral
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: fractional
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: boolean
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: string
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: object
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:method:: namespace(self) -> str
      :property:


   .. py:method:: to_summary_dict(self, cfg: whylogs.core.configs.SummaryConfig) -> Dict[str, Any]


   .. py:method:: columnar_update(self, data: whylogs.core.preprocessing.PreprocessedColumn) -> whylogs.core.metrics.metrics.OperationResult


   .. py:method:: zero(cls, config: whylogs.core.metrics.metrics.MetricConfig) -> TypeCountersMetric
      :classmethod:


   .. py:method:: get_namespace(cls, config: MetricConfig) -> str
      :classmethod:


   .. py:method:: merge(self: METRIC, other: METRIC) -> METRIC


   .. py:method:: to_protobuf(self) -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths(self) -> List[str]


   .. py:method:: from_protobuf(cls: Type[METRIC], msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



.. py:class:: ColumnCountsMetric

   Bases: :py:obj:`whylogs.core.metrics.metrics.Metric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: n
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:attribute:: null
      :annotation: :whylogs.core.metrics.metric_components.IntegralComponent

      

   .. py:method:: namespace(self) -> str
      :property:


   .. py:method:: columnar_update(self, data: whylogs.core.preprocessing.PreprocessedColumn) -> whylogs.core.metrics.metrics.OperationResult


   .. py:method:: to_summary_dict(self, cfg: whylogs.core.configs.SummaryConfig) -> Dict[str, Any]


   .. py:method:: zero(cls, config: whylogs.core.metrics.metrics.MetricConfig) -> ColumnCountsMetric
      :classmethod:


   .. py:method:: get_namespace(cls, config: MetricConfig) -> str
      :classmethod:


   .. py:method:: merge(self: METRIC, other: METRIC) -> METRIC


   .. py:method:: to_protobuf(self) -> whylogs.core.proto.MetricMessage


   .. py:method:: get_component_paths(self) -> List[str]


   .. py:method:: from_protobuf(cls: Type[METRIC], msg: whylogs.core.proto.MetricMessage) -> METRIC
      :classmethod:



